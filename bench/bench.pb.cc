// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bench.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "bench.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace proto {

void protobuf_ShutdownFile_bench_2eproto() {
  delete benchy::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_bench_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_bench_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_bench_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  benchy::default_instance_ = new benchy();
  benchy::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_bench_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_bench_2eproto_once_);
void protobuf_AddDesc_bench_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_bench_2eproto_once_,
                 &protobuf_AddDesc_bench_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_bench_2eproto {
  StaticDescriptorInitializer_bench_2eproto() {
    protobuf_AddDesc_bench_2eproto();
  }
} static_descriptor_initializer_bench_2eproto_;
#endif

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int benchy::kF0FieldNumber;
const int benchy::kF1FieldNumber;
const int benchy::kF2FieldNumber;
const int benchy::kF3FieldNumber;
const int benchy::kF4FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

benchy::benchy()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.benchy)
}

void benchy::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

benchy::benchy(const benchy& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.benchy)
}

void benchy::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f0_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f2_ = GOOGLE_ULONGLONG(0);
  f3_ = GOOGLE_LONGLONG(0);
}

benchy::~benchy() {
  // @@protoc_insertion_point(destructor:proto.benchy)
  SharedDtor();
}

void benchy::SharedDtor() {
  f0_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void benchy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const benchy& benchy::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_bench_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_bench_2eproto();
#endif
  return *default_instance_;
}

benchy* benchy::default_instance_ = NULL;

benchy* benchy::New(::google::protobuf::Arena* arena) const {
  benchy* n = new benchy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void benchy::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.benchy)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(benchy, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<benchy*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(f2_, f3_);
  f0_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  f4_.Clear();
}

bool benchy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.benchy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string f0 = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f0()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->f0().data(), this->f0().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.benchy.f0"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f1;
        break;
      }

      // optional string f1 = 2;
      case 2: {
        if (tag == 18) {
         parse_f1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f1()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->f1().data(), this->f1().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.benchy.f1"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_f2;
        break;
      }

      // optional uint64 f2 = 3;
      case 3: {
        if (tag == 24) {
         parse_f2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &f2_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_f3;
        break;
      }

      // optional int64 f3 = 4;
      case 4: {
        if (tag == 32) {
         parse_f3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &f3_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_f4;
        break;
      }

      // repeated bytes f4 = 5;
      case 5: {
        if (tag == 42) {
         parse_f4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_f4()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_f4;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.benchy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.benchy)
  return false;
#undef DO_
}

void benchy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.benchy)
  // optional string f0 = 1;
  if (this->f0().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->f0().data(), this->f0().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.benchy.f0");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->f0(), output);
  }

  // optional string f1 = 2;
  if (this->f1().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->f1().data(), this->f1().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.benchy.f1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->f1(), output);
  }

  // optional uint64 f2 = 3;
  if (this->f2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->f2(), output);
  }

  // optional int64 f3 = 4;
  if (this->f3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->f3(), output);
  }

  // repeated bytes f4 = 5;
  for (int i = 0; i < this->f4_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->f4(i), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.benchy)
}

int benchy::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto.benchy)
  int total_size = 0;

  // optional string f0 = 1;
  if (this->f0().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->f0());
  }

  // optional string f1 = 2;
  if (this->f1().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->f1());
  }

  // optional uint64 f2 = 3;
  if (this->f2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->f2());
  }

  // optional int64 f3 = 4;
  if (this->f3() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->f3());
  }

  // repeated bytes f4 = 5;
  total_size += 1 * this->f4_size();
  for (int i = 0; i < this->f4_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->f4(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void benchy::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const benchy*>(&from));
}

void benchy::MergeFrom(const benchy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.benchy)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  f4_.MergeFrom(from.f4_);
  if (from.f0().size() > 0) {

    f0_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.f0_);
  }
  if (from.f1().size() > 0) {

    f1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.f1_);
  }
  if (from.f2() != 0) {
    set_f2(from.f2());
  }
  if (from.f3() != 0) {
    set_f3(from.f3());
  }
}

void benchy::CopyFrom(const benchy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.benchy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool benchy::IsInitialized() const {

  return true;
}

void benchy::Swap(benchy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void benchy::InternalSwap(benchy* other) {
  f0_.Swap(&other->f0_);
  f1_.Swap(&other->f1_);
  std::swap(f2_, other->f2_);
  std::swap(f3_, other->f3_);
  f4_.UnsafeArenaSwap(&other->f4_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string benchy::GetTypeName() const {
  return "proto.benchy";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// benchy

// optional string f0 = 1;
void benchy::clear_f0() {
  f0_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& benchy::f0() const {
  // @@protoc_insertion_point(field_get:proto.benchy.f0)
  return f0_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void benchy::set_f0(const ::std::string& value) {
  
  f0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.benchy.f0)
}
 void benchy::set_f0(const char* value) {
  
  f0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.benchy.f0)
}
 void benchy::set_f0(const char* value, size_t size) {
  
  f0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.benchy.f0)
}
 ::std::string* benchy::mutable_f0() {
  
  // @@protoc_insertion_point(field_mutable:proto.benchy.f0)
  return f0_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* benchy::release_f0() {
  // @@protoc_insertion_point(field_release:proto.benchy.f0)
  
  return f0_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void benchy::set_allocated_f0(::std::string* f0) {
  if (f0 != NULL) {
    
  } else {
    
  }
  f0_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), f0);
  // @@protoc_insertion_point(field_set_allocated:proto.benchy.f0)
}

// optional string f1 = 2;
void benchy::clear_f1() {
  f1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& benchy::f1() const {
  // @@protoc_insertion_point(field_get:proto.benchy.f1)
  return f1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void benchy::set_f1(const ::std::string& value) {
  
  f1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.benchy.f1)
}
 void benchy::set_f1(const char* value) {
  
  f1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.benchy.f1)
}
 void benchy::set_f1(const char* value, size_t size) {
  
  f1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.benchy.f1)
}
 ::std::string* benchy::mutable_f1() {
  
  // @@protoc_insertion_point(field_mutable:proto.benchy.f1)
  return f1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* benchy::release_f1() {
  // @@protoc_insertion_point(field_release:proto.benchy.f1)
  
  return f1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void benchy::set_allocated_f1(::std::string* f1) {
  if (f1 != NULL) {
    
  } else {
    
  }
  f1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), f1);
  // @@protoc_insertion_point(field_set_allocated:proto.benchy.f1)
}

// optional uint64 f2 = 3;
void benchy::clear_f2() {
  f2_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 benchy::f2() const {
  // @@protoc_insertion_point(field_get:proto.benchy.f2)
  return f2_;
}
 void benchy::set_f2(::google::protobuf::uint64 value) {
  
  f2_ = value;
  // @@protoc_insertion_point(field_set:proto.benchy.f2)
}

// optional int64 f3 = 4;
void benchy::clear_f3() {
  f3_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 benchy::f3() const {
  // @@protoc_insertion_point(field_get:proto.benchy.f3)
  return f3_;
}
 void benchy::set_f3(::google::protobuf::int64 value) {
  
  f3_ = value;
  // @@protoc_insertion_point(field_set:proto.benchy.f3)
}

// repeated bytes f4 = 5;
int benchy::f4_size() const {
  return f4_.size();
}
void benchy::clear_f4() {
  f4_.Clear();
}
 const ::std::string& benchy::f4(int index) const {
  // @@protoc_insertion_point(field_get:proto.benchy.f4)
  return f4_.Get(index);
}
 ::std::string* benchy::mutable_f4(int index) {
  // @@protoc_insertion_point(field_mutable:proto.benchy.f4)
  return f4_.Mutable(index);
}
 void benchy::set_f4(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.benchy.f4)
  f4_.Mutable(index)->assign(value);
}
 void benchy::set_f4(int index, const char* value) {
  f4_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.benchy.f4)
}
 void benchy::set_f4(int index, const void* value, size_t size) {
  f4_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.benchy.f4)
}
 ::std::string* benchy::add_f4() {
  // @@protoc_insertion_point(field_add_mutable:proto.benchy.f4)
  return f4_.Add();
}
 void benchy::add_f4(const ::std::string& value) {
  f4_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.benchy.f4)
}
 void benchy::add_f4(const char* value) {
  f4_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.benchy.f4)
}
 void benchy::add_f4(const void* value, size_t size) {
  f4_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.benchy.f4)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
benchy::f4() const {
  // @@protoc_insertion_point(field_list:proto.benchy.f4)
  return f4_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
benchy::mutable_f4() {
  // @@protoc_insertion_point(field_mutable_list:proto.benchy.f4)
  return &f4_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
